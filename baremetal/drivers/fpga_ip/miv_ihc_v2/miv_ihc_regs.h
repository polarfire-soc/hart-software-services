/*******************************************************************************
 * Copyright 2023 Microchip FPGA Embedded Systems Solutions.
 * Script version: develop-1.0.020
 * Register specification version: v0.1
 * Register specification Date: 2023-09-11 00:00:00
 * Note: Autogenerated headers from IP supplied xlsx
 * Author: Embedded Software
 */

#ifndef MIV_IHC_REGS_H_
#define MIV_IHC_REGS_H_

#ifdef __cplusplus
extern "C" {
#endif

#include "uint_32_bit_masks.h"

/*******************************************************************************
 * Macro definitions
 *
 * MIV_IHC_REGS_<REG_NAME>_REG_OFFSET => Register offset from base address.
 *
 * MIV_IHC_REGS_<REG_NAME>_RW_MASK => This identifies what read/write bits are
 * used within a register.
 *
 * MIV_IHC_REGS_<REG_NAME>_RO_MASK => This identifies what read only bits are
 * used within a register.
 *
 * MIV_IHC_REGS_<REG_NAME>_WO_MASK => This identifies what write only bits are
 * used within a register.
 *
 * MIV_IHC_REGS_<REG_NAME>_READ_MASK => This identifies what read bits are used
 * within a register.
 *
 * MIV_IHC_REGS_<REG_NAME>_WRITE_MASK => This identifies what write bits are
 * used within a register.
 *
 * MIV_IHC_REGS_<REG_NAME>_<FIELD_NAME>_OFFSET => This describes the register
 * offset from the base address for a specific field.
 *
 * MIV_IHC_REGS_<REG_NAME>_<FIELD_NAME>_SHIFT => Bit field shift.
 *
 * MIV_IHC_REGS_<REG_NAME>_<FIELD_NAME>_NS_MASK => This describes the field mask
 * without the shift included. This mask is based on the width of the bit field.
 *
 * MIV_IHC_REGS_<REG_NAME>_<FIELD_NAME>_MASK => This describes the field mask
 * with the shift included.
 */

/**
 * Field Name: ACKIE(AACKIE)
 * Field Desc: Message Ack Interrupt Enable. Interrupt to indicate to the
 * core accessing this channel that a message has been consumed and sends an
 * acknowledgment to this channel. Field Type: read-write
 */
#define MIV_IHC_REGS_CH_CTRL_ACKIE_SHIFT   (5U)
#define MIV_IHC_REGS_CH_CTRL_ACKIE_NS_MASK BIT(0)
#define MIV_IHC_REGS_CH_CTRL_ACKIE_MASK    (BIT(MIV_IHC_REGS_CH_CTRL_ACKIE_SHIFT))

/**
 * Field Name: ACKCLR (AMPACK)
 * Field Desc: Ack received. Used to indicate that associated channel has
 * acknowledgment a message now message can be cleared. Field Type: read-write
 */
#define MIV_IHC_REGS_CH_CTRL_ACKCLR_SHIFT   (4U)
#define MIV_IHC_REGS_CH_CTRL_ACKCLR_NS_MASK BIT(0)
#define MIV_IHC_REGS_CH_CTRL_ACKCLR_MASK    (BIT(MIV_IHC_REGS_CH_CTRL_ACKCLR_SHIFT))

/**
 * Field Name: ACK (BMPACK)
 * Field Desc: Ack Sent. Used to indicate to associated channel that it has sent
 * a acknowledgment. Field Type: read-write
 */
#define MIV_IHC_REGS_CH_CTRL_ACK_SHIFT   (3U)
#define MIV_IHC_REGS_CH_CTRL_ACK_NS_MASK BIT(0)
#define MIV_IHC_REGS_CH_CTRL_ACK_MASK    (BIT(MIV_IHC_REGS_CH_CTRL_ACK_SHIFT))

/**
 * Field Name: MPIE (AMPIE)
 * Field Desc: Message Present Interrupt Enable. Interrupt to indicate to the
 * core accessing this channel that a message is present and read the msg from
 * channel. Field Type: read-write
 */
#define MIV_IHC_REGS_CH_CTRL_MPIE_SHIFT   (2U)
#define MIV_IHC_REGS_CH_CTRL_MPIE_NS_MASK BIT(0)
#define MIV_IHC_REGS_CH_CTRL_MPIE_MASK    (BIT(MIV_IHC_REGS_CH_CTRL_MPIE_SHIFT))

/**
 * Field Name: MP (AMP)
 * Field Desc: Message Present received. Used to indicate that it new message is
 * sent from associated channel. Field Type: read-write
 */
#define MIV_IHC_REGS_CH_CTRL_MP_SHIFT   (1U)
#define MIV_IHC_REGS_CH_CTRL_MP_NS_MASK BIT(0)
#define MIV_IHC_REGS_CH_CTRL_MP_MASK    (BIT(MIV_IHC_REGS_CH_CTRL_MP_SHIFT))

/**
 * Field Name: RMP (BMP)
 * Field Desc: Message send. Used to indicate to associated channel that it has
 * send new message. Field Type: read-write
 */
#define MIV_IHC_REGS_CH_CTRL_RMP_SHIFT   (0U)
#define MIV_IHC_REGS_CH_CTRL_RMP_NS_MASK BIT(0)
#define MIV_IHC_REGS_CH_CTRL_RMP_MASK    (BIT(MIV_IHC_REGS_CH_CTRL_RMP_SHIFT))

/**
 * Field Name: MESSAGE_OUT
 * Field Desc: Write to indicate MSGOUT size to associated channel.
 * Field Type: read-write
 */
#define MIV_IHC_REGS_MESSAGE_SIZE_MESSAGE_OUT_SHIFT   (0U)
#define MIV_IHC_REGS_MESSAGE_SIZE_MESSAGE_OUT_NS_MASK GENMASK(15, 0)
#define MIV_IHC_REGS_MESSAGE_SIZE_MESSAGE_OUT_MASK    (GENMASK(15, 0) << MIV_IHC_REGS_MESSAGE_SIZE_MESSAGE_OUT_SHIFT)

/**
 * Field Name: MESSAGE_IN
 * Field Desc: Read indication of MSGIN size from associated channel.
 * Field Type: read-only
 */
#define MIV_IHC_REGS_MESSAGE_SIZE_MESSAGE_IN_SHIFT   (8U)
#define MIV_IHC_REGS_MESSAGE_SIZE_MESSAGE_IN_NS_MASK GENMASK(7, 0)
#define MIV_IHC_REGS_MESSAGE_SIZE_MESSAGE_IN_MASK    (GENMASK(15, 8))

/* Core And its Channel Addresses *******/

#define MIV_IHC_REGS_IRQ_STATUS_SHIFT      (0U)
#define MIV_IHC_REGS_IRQ_STATUS_NS_MASK    GENMASK(11, 0)

#define MIV_IHC_REGS_IRQ_ENABLE_MASK       GENMASK(11, 0)
#define MIV_IHC_REGS_IRQ_DISABLE_MASK      (0U)

#define MIV_IHC_REGS_MP_IRQ_STATUS_MASK    BIT(0)

#define MIV_IHC_REGS_MC_IRQ_STATUS_SHIFT   (1U)
#define MIV_IHC_REGS_MC_IRQ_STATUS_NS_MASK BIT(0)
#define MIV_IHC_REGS_MC_IRQ_STATUS_MASK    (BIT(MIV_IHC_REGS_MC_IRQ_STATUS_SHIFT))

/*********************************** MIV **************************************/

#ifndef IHC_BASE
#define IHC_BASE 0x50000000UL
#endif

#ifndef IHC_IP_VERSION
#define IHC_IP_VERSION (IHC_BASE + 0x0003BFC)
#endif

#ifndef IHCIM_H0
#define IHCIM_H0 (IHC_BASE + 0x0004000)
#endif

#ifndef IHC_CH_H0_H1
#define IHC_CH_H0_H1 (IHC_BASE + 0x0004100)
#endif

#ifndef IHC_CH_H0_H2
#define IHC_CH_H0_H2 (IHC_BASE + 0x0004200)
#endif

#ifndef IHC_CH_H0_H3
#define IHC_CH_H0_H3 (IHC_BASE + 0x0004300)
#endif

#ifndef IHC_CH_H0_H4
#define IHC_CH_H0_H4 (IHC_BASE + 0x0004400)
#endif

#ifndef IHC_CH_H0_H5
#define IHC_CH_H0_H5 (IHC_BASE + 0x0004500)
#endif

#ifndef IHCIM_H1
#define IHCIM_H1 (IHC_BASE + 0x0008000)
#endif

#ifndef IHC_CH_H1_H0
#define IHC_CH_H1_H0 (IHC_BASE + 0x0008100)
#endif

#ifndef IHC_CH_H1_H2
#define IHC_CH_H1_H2 (IHC_BASE + 0x0008200)
#endif

#ifndef IHC_CH_H1_H3
#define IHC_CH_H1_H3 (IHC_BASE + 0x0008300)
#endif

#ifndef IHC_CH_H1_H4
#define IHC_CH_H1_H4 (IHC_BASE + 0x0008400)
#endif

#ifndef IHC_CH_H1_H5
#define IHC_CH_H1_H5 (IHC_BASE + 0x0008500)
#endif

#ifndef IHCIM_H2
#define IHCIM_H2 (IHC_BASE + 0x000C000)
#endif

#ifndef IHC_CH_H2_H0
#define IHC_CH_H2_H0 (IHC_BASE + 0x000C100)
#endif

#ifndef IHC_CH_H2_H1
#define IHC_CH_H2_H1 (IHC_BASE + 0x000C200)
#endif

#ifndef IHC_CH_H2_H3
#define IHC_CH_H2_H3 (IHC_BASE + 0x000C300)
#endif

#ifndef IHC_CH_H2_H4
#define IHC_CH_H2_H4 (IHC_BASE + 0x000C400)
#endif

#ifndef IHC_CH_H2_H5
#define IHC_CH_H2_H5 (IHC_BASE + 0x000C500)
#endif

#ifndef IHCIM_H3
#define IHCIM_H3 (IHC_BASE + 0x0010000)
#endif

#ifndef IHC_CH_H3_H0
#define IHC_CH_H3_H0 (IHC_BASE + 0x0010100)
#endif

#ifndef IHC_CH_H3_H1
#define IHC_CH_H3_H1 (IHC_BASE + 0x0010200)
#endif

#ifndef IHC_CH_H3_H2
#define IHC_CH_H3_H2 (IHC_BASE + 0x0010300)
#endif

#ifndef IHC_CH_H3_H4
#define IHC_CH_H3_H4 (IHC_BASE + 0x0010400)
#endif

#ifndef IHC_CH_H3_H5
#define IHC_CH_H3_H5 (IHC_BASE + 0x0010500)
#endif

#ifndef IHCIM_H4
#define IHCIM_H4 (IHC_BASE + 0x0014000)
#endif

#ifndef IHC_CH_H4_H0
#define IHC_CH_H4_H0 (IHC_BASE + 0x0014100)
#endif

#ifndef IHC_CH_H4_H1
#define IHC_CH_H4_H1 (IHC_BASE + 0x0014200)
#endif

#ifndef IHC_CH_H4_H2
#define IHC_CH_H4_H2 (IHC_BASE + 0x0014300)
#endif

#ifndef IHC_CH_H4_H3
#define IHC_CH_H4_H3 (IHC_BASE + 0x0014400)
#endif

#ifndef IHC_CH_H4_H5
#define IHC_CH_H4_H5 (IHC_BASE + 0x0014500)
#endif

#ifndef IHCIM_H5
#define IHCIM_H5 (IHC_BASE + 0x0018000)
#endif

#ifndef IHC_CH_H5_H0
#define IHC_CH_H5_H0 (IHC_BASE + 0x0018100)
#endif

#ifndef IHC_CH_H5_H1
#define IHC_CH_H5_H1 (IHC_BASE + 0x0018200)
#endif

#ifndef IHC_CH_H5_H2
#define IHC_CH_H5_H2 (IHC_BASE + 0x0018300)
#endif

#ifndef IHC_CH_H5_H3
#define IHC_CH_H5_H3 (IHC_BASE + 0x0018400)
#endif

#ifndef IHC_CH_H5_H4
#define IHC_CH_H5_H4 (IHC_BASE + 0x0018500)
#endif

#ifdef __cplusplus
}
#endif

#endif /* MIV_IHC_REGS_H_ */
